<?php

/*
 *  This file is part of Mathstreams.
 *
 *  Copyright (c) 2015  Sohani Academy <developer@sohaniacademy.com>
 *
 *  Mathstreams is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Magnets\MathgymBundle\Entity\Chat;

use Doctrine\ORM\EntityRepository;

/**
 * TicketRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TicketRepository extends EntityRepository
{

    public function persist($ticket)
    {
        $this->_em->persist($ticket);
    }

    public function remove($ticket)
    {
        $this->_em->remove($ticket);
    }

    public function flush()
    {
        $this->_em->flush();
    }

    public function getUserRooms($user)
    {
        //get rooms for which this user has a ticket..
        $ticks = $this->findBy(array('user' => $user));
        $out = array();
        foreach ($ticks as $tick) {
            $out[] = $tick->getRoom()->getId();
        }
        return $out;
    }

    public function getNewExpiry()
    {
        return new \DateTime('now +10 minute');
    }

    public function getRoomUsers($room)
    {
        $ticks = $room->getTickets();
        $out = [];
        $curTime = new \DateTime('now');

        foreach ($ticks as $tick) {
            if ($tick->getExpires() < $curTime) {
                //remove ticket..
                $this->remove($tick);
            } else {
                $tick->setExpires($this->getNewExpiry());
                $out[] = $tick->getUser();
            }
        }
        return $out;
    }

    public function isInsideRoom($room, $user)
    {
        $curTime = new \DateTime('now');
        $tickets = $user->getTickets();
        foreach ($tickets as $ticket) {
            //check expiry..
            if ($ticket->getExpires() < $curTime) {
                $this->remove($ticket);
                continue;
            }
            //check room..
            if ($ticket->getRoom() == $room) {
                return true;
            }
        }
        return false;
    }

    public function enterRoom($room, $user)
    {
        $tick = new Ticket($room, $user, $this->getNewExpiry());
        $this->persist($tick);
        $this->flush();
    }

    public function leaveRoom($room, $user)
    {
        $ticket = $this->findOneBy(['room' => $room, 'user' => $user]);
        if ($ticket) {
            $this->remove($ticket);
            $this->flush();
        }
    }

}
