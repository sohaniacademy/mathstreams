<?php

/*
 *  This file is part of Mathstreams.
 *
 *  Copyright (c) 2015  Sohani Academy <developer@sohaniacademy.com>
 *
 *  Mathstreams is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Magnets\MathgymBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RatingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RatingRepository extends EntityRepository {

    public function persist($rating) {
        $this->_em->persist($rating);
    }

    public function remove($rating) {
        $this->_em->remove($rating);
    }

    public function addProblemRating($author, $pid, $score) {
        $handle = $this->getProblemHandle($pid);
        //check if rating exists.. 
        $rating = $this->findOneBy(array('user' => $author, 'handle' => $handle));
        if ($rating !== null) {
            //update the existing rating.. 
            $rating->setScore($score);
        } else {
            $rating = new Rating();
            $rating->setUser($author);
            $rating->setHandle($handle);
            $rating->setScore($score);
            $this->persist($rating);
        }
        return $rating;
    }

    public function addSolutionRating($author, $sid, $score) {
        $handle = $this->getSolutionHandle($sid);
        //check if rating exists.. 
        $rating = $this->findOneBy(array('user' => $author, 'handle' => $handle));
        if ($rating !== null) {
            //update the existing rating.. 
            $rating->setScore($score);
        } else {
            $rating = new Rating();
            $rating->setUser($author);
            $rating->setHandle($handle);
            $rating->setScore($score);
            $this->persist($rating);
        }
        return $rating;
    }

    public function getSolStats($solution) {
        $ratings = $this->findBy(array('handle' => $this->getSolutionHandle($solution->getId())));
        $totalRat = 0;
        $totalCnt = 0;
        foreach ($ratings as $rating) {
            $totalRat += $rating->getScore();
            $totalCnt ++;
        }
        if ($totalCnt > 0) {
            $totalRat = $totalRat / $totalCnt;
        }
        return [$totalRat, $totalCnt];
    }

    public function getProbStats($problem) {
        $ratings = $this->findBy(array('handle' => $this->getProblemHandle($problem->getId())));       
        $totalRat = 0;        
        $totalCnt = 0;
        foreach ($ratings as $rating) {
            $totalRat += $rating->getScore();
            $totalCnt ++;
        }
        if ($totalCnt > 0) {
            $totalRat = $totalRat / $totalCnt;
        }
        return [$totalRat, $totalCnt];
    }

    public function getProblemHandle($pid) {
        return 'p_' . $pid;
    }

    public function getSolutionHandle($sid) {
        return 's_' . $sid;
    }

}
