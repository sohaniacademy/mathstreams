<?php

/*
 *  This file is part of Mathstreams.
 *
 *  Copyright (c) 2015  Sohani Academy <developer@sohaniacademy.com>
 *
 *  Mathstreams is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Magnets\MathgymBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SolutionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SolutionRepository extends EntityRepository {

    public function persist($draft) {
        $this->_em->persist($draft);
    }

    public function remove($draft) {
        $this->_em->remove($draft);
    }

    public function addDraft($user, $problem, $response) {
        $draft = new Solution($user, $problem, $response);
        $this->persist($draft);
        return $draft;
    }

    public function getDraft($user, $problem) {

        $drafts = $this->findBy(array('user' => $user, 'problem' => $problem));

        if (sizeof($drafts) == 1) {
            //check if it's already submitted:
            if ($drafts[0]->getIsDraft()) {
                return array('status' => 'Draft', 'draft' => $drafts[0]);
            } else {
                return array('status' => 'Submitted', 'draft' => $drafts[0]);
            }
        } else if (sizeof($drafts) == 0) {
            return array('status' => 'NoneExists', 'draft' => null);
        } else {
            // something went wrong.. what to do?
        }
    }

    public function getStats($user, $stream) {

        //return an assoc array of per-problem stats..        
        $psmaps = $stream->getPSMaps();

        //make index-wise assoc array.. there should be a better way of doing this!        
        $problems = array();
        $pids = array();
        foreach ($psmaps as $psmap) {
            $problems[$psmap->getPos()] = $psmap->getProblem();
            $pids[] = $psmap->getProblem()->getId();
        }

        //need scores from all drafts whose problems belong to this stream, and solved by the user....        
        $drafts = $this->createQueryBuilder('d')->where('d.problem in (:arr)')->andWhere('d.user = :user')
                        ->setParameter('arr', $pids)->setParameter('user', $user)->getQuery()->getResult();

        //make into an associative array.. there should be a better way of doing this!
        $scores = array();
        $status = array();
        foreach ($drafts as $draft) {
            $pid = $draft->getProblem()->getId();
            $scores[$pid] = $draft->getScore();
            $status[$pid] = ($draft->getIsDraft() ? '1' : '2');
        }
        foreach ($pids as $pid) {
            if (!array_key_exists($pid, $status)) {
                $status[$pid] = '0';
                $scores[$pid] = 'N/A';
            }
        }
        return array('problems' => $problems, 'scores' => $scores, 'status' => $status);
    }

    public function getAllStats($user, $streams) {
        //would like to get stats for all the specified streams..
        //how to do this.. best, problem-wise.. 
        //take each problem, find its streams, update their stats.. loop
        //at the end, for each stream, add the 'new' problems count 
        //
        //in the long run, we need a more optimized/'cached' way to do all of this..

        $drafts = $this->findBy(array('user' => $user));

        $stats = array();
        foreach ($drafts as $draft) {
            $psmaps = $draft->getProblem()->getPSMaps();
            foreach ($psmaps as $psmap) {
                $sid = $psmap->getStream()->getId();
                if (!array_key_exists($sid, $stats)) {
                    //create the stream key.. 
                    $stats[$sid] = array('0' => 0, '1' => 0, '2' => 0);
                }
                //check status.. 
                if ($draft->getIsDraft()) {
                    $stats[$sid][1] ++;
                } else {
                    $stats[$sid][2] ++;
                }
            }
        }
        //finally, fetch and add the 'new problem' stats.. 
        foreach ($streams as $stream) {
            $sid = $stream->getId();
            if (!array_key_exists($sid, $stats)) {
                //create the stream key.. 
                $stats[$sid] = array('0' => 0, '1' => 0, '2' => 0);
            }
            $totalCount = sizeof($stream->getPSMaps());
            $stats[$sid][0] = $totalCount - ($stats[$sid][1] + $stats[$sid][2]);
        }
        return $stats;
    }

}