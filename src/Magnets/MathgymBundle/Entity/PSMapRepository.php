<?php

/*
 *  This file is part of Mathstreams.
 *
 *  Copyright (c) 2015  Sohani Academy <developer@sohaniacademy.com>
 *
 *  Mathstreams is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Magnets\MathgymBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PSMapRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PSMapRepository extends EntityRepository {

    public function persist($psmap) {
        $this->_em->persist($psmap);
    }

    public function remove($psmap) {
        $this->_em->remove($psmap);
    }

    public function addmap($problem, $stream) {

        if ($this->isMemberOf($problem, $stream)) {
            return;
        }
        //TODO: check if we really need to realign pos values for this stream..
        $psMaps = $this->findBy(array('stream' => $stream), array('pos' => 'ASC'));
        $pos = 1;
        foreach ($psMaps as $psMap) {
            $psMap->setPos($pos);
            $pos++;
        }

        $psmap = new PSMap($problem, $stream, $pos);
        $this->persist($psmap);
    }

    public function delmap($problem, $stream) {
        $maps = $this->findBy(array('problem' => $problem, 'stream' => $stream));
        if ($maps !== null) {
            foreach ($maps as $map) {
                $this->remove($map);
            }
        }
    }

    public function isMemberOf($problem, $stream) {
        return (($this->findBy(array('problem' => $problem, 'stream' => $stream))) != null );
    }

}
